package com.bw.movie.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bw.movie.databean.DataBeanMovie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_BEAN_MOVIE".
*/
public class DataBeanMovieDao extends AbstractDao<DataBeanMovie, Long> {

    public static final String TABLENAME = "DATA_BEAN_MOVIE";

    /**
     * Properties of entity DataBeanMovie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property JsonBanner = new Property(1, String.class, "jsonBanner", false, "JSON_BANNER");
        public final static Property JsonReleaseMovie = new Property(2, String.class, "jsonReleaseMovie", false, "JSON_RELEASE_MOVIE");
        public final static Property JsonComingSoonMovie = new Property(3, String.class, "jsonComingSoonMovie", false, "JSON_COMING_SOON_MOVIE");
        public final static Property JsonHotMovie = new Property(4, String.class, "jsonHotMovie", false, "JSON_HOT_MOVIE");
    }


    public DataBeanMovieDao(DaoConfig config) {
        super(config);
    }
    
    public DataBeanMovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_BEAN_MOVIE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"JSON_BANNER\" TEXT," + // 1: jsonBanner
                "\"JSON_RELEASE_MOVIE\" TEXT," + // 2: jsonReleaseMovie
                "\"JSON_COMING_SOON_MOVIE\" TEXT," + // 3: jsonComingSoonMovie
                "\"JSON_HOT_MOVIE\" TEXT);"); // 4: jsonHotMovie
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_BEAN_MOVIE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataBeanMovie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jsonBanner = entity.getJsonBanner();
        if (jsonBanner != null) {
            stmt.bindString(2, jsonBanner);
        }
 
        String jsonReleaseMovie = entity.getJsonReleaseMovie();
        if (jsonReleaseMovie != null) {
            stmt.bindString(3, jsonReleaseMovie);
        }
 
        String jsonComingSoonMovie = entity.getJsonComingSoonMovie();
        if (jsonComingSoonMovie != null) {
            stmt.bindString(4, jsonComingSoonMovie);
        }
 
        String jsonHotMovie = entity.getJsonHotMovie();
        if (jsonHotMovie != null) {
            stmt.bindString(5, jsonHotMovie);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataBeanMovie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jsonBanner = entity.getJsonBanner();
        if (jsonBanner != null) {
            stmt.bindString(2, jsonBanner);
        }
 
        String jsonReleaseMovie = entity.getJsonReleaseMovie();
        if (jsonReleaseMovie != null) {
            stmt.bindString(3, jsonReleaseMovie);
        }
 
        String jsonComingSoonMovie = entity.getJsonComingSoonMovie();
        if (jsonComingSoonMovie != null) {
            stmt.bindString(4, jsonComingSoonMovie);
        }
 
        String jsonHotMovie = entity.getJsonHotMovie();
        if (jsonHotMovie != null) {
            stmt.bindString(5, jsonHotMovie);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataBeanMovie readEntity(Cursor cursor, int offset) {
        DataBeanMovie entity = new DataBeanMovie( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jsonBanner
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jsonReleaseMovie
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jsonComingSoonMovie
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // jsonHotMovie
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataBeanMovie entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJsonBanner(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJsonReleaseMovie(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJsonComingSoonMovie(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJsonHotMovie(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataBeanMovie entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataBeanMovie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataBeanMovie entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
